{"version":3,"file":"../css/core--group.css","mappings":";;;AAEA;EAEC;EACA;AAFD;AAGC;EAEC;AAFF;ACkCE;ED7BD;IAEE;EAHD;EAIC;IACC;EAFF;AACF,C","sources":["webpack://example-ghost-org/./src/scss/blocks/core/group.scss","webpack://example-ghost-org/./src/scss/utils/breakpoint-mixin.scss"],"sourcesContent":["@use \"../../utils\";\n\n.wp-block-group {\n\t// padding added for parity with the block editor\n\tpadding-bottom: 0;\n\tpadding-top: 0;\n\t&.is-selected,\n\t&.has-child-selected {\n\t\tpadding-bottom: 1.25em;\n\t}\n\n\t&.wp-block-group-is-layout-grid {\n\t\t@include utils.breakpoint-down(\"md\") {\n\t\t\tgrid-template-columns: 1fr;\n\t\t\t> :is(*, div) {\n\t\t\t\tgrid-column: 1 / -1;\n\t\t\t}\n\t\t}\n\t}\n}\n","/// This map is used for a mobile first responsive coding\n/// approach mixin in `breakpoint`.\n/// The map uses simple t-shirt sizing to define the breakpoints.\n@use \"breakpoints\" as *;\n\n/// This mixin assumes mobile-first coding, and helps you respond to\n/// different breakpoints from within each applicable selector.\n/// It pulls breakpoints from a map of breakpoints set in `theme.json`.\n/// Read More : https://sass-guidelin.es/#responsive-web-design-and-breakpoints\n@mixin breakpoint($breakpoint) {\n\t// Retrieves the value of the breakpoint\n\t$raw-query: map-get($breakpoints, $breakpoint);\n\n\t// If the breakpoint exists in the map\n\t@if $raw-query {\n\t\t$query: if(type-of($raw-query) == \"string\", unquote($raw-query), inspect($raw-query));\n\n\t\t// Prints a media query based on the value\n\t\t@media (min-width: #{$query} ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@error \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n\t\t + \"Please make sure it is defined in `$breakpoints` map.\";\n\t}\n}\n\n/// This mixin assumes mobile-first coding, and helps you respond to\n/// different breakpoints from within each applicable selector.\n/// It pulls breakpoints from a map of breakpoints set in `theme.json`.\n/// Read More : https://sass-guidelin.es/#responsive-web-design-and-breakpoints\n@mixin breakpoint-down($breakpoint) {\n\t// Retrieves the value of the breakpoint\n\t$raw-query: map-get($breakpoints, $breakpoint);\n\n\t// If the breakpoint exists in the map\n\t@if $raw-query {\n\t\t$query: if(type-of($raw-query) == \"string\", unquote($raw-query), inspect($raw-query));\n\n\t\t// Prints a media query based on the value\n\t\t@media (max-width: #{$query} ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@error \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n\t\t + \"Please make sure it is defined in `$breakpoints` map.\";\n\t}\n}\n"],"names":[],"sourceRoot":""}